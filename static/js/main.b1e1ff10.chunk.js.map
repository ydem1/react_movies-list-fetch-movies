{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","_ref","movie","_jsxs","className","children","_jsx","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","addMovie","_useState","useState","_useState2","_slicedToArray","isError","setIsError","_useState3","_useState4","isVisibleMovieCard","setIsVisibleMovieCard","_useState5","_useState6","inputValue","setInputValue","_useState7","_useState8","isLoading","setIsLoading","_useState9","_useState10","setMovie","_Fragment","htmlFor","type","id","placeholder","value","onChange","event","target","concat","onClick","query","preventDefault","fetch","then","res","json","catch","Response","Error","result","Title","Plot","Poster","imdbID","selectedMovie","finally","disabled","find","movieItem","newMovies","_toConsumableArray","App","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b1e1ff10.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport { getMovie } from '../../api';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[]\n  addMovie: (newMovies: Movie[]) => void\n};\n\nexport const FindMovie: React.FC<Props> = ({ movies, addMovie }) => {\n  const [isError, setIsError] = useState(false);\n  const [isVisibleMovieCard, setIsVisibleMovieCard] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [movie, setMovie] = useState<Movie>({\n    title: 'Title',\n    description: 'Plot',\n    imgUrl: 'Poster',\n    imdbUrl: 'imdbUrl',\n    imdbId: 'imdbID',\n  });\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setIsError(false);\n    setInputValue(event.target.value);\n  };\n\n  const handleSearchBtn = (\n    event: React.MouseEvent<HTMLButtonElement>,\n  ) => {\n    event.preventDefault();\n\n    setIsLoading(true);\n\n    getMovie(inputValue).then((result) => {\n      if ('Error' in result) {\n        setIsError(true);\n      } else {\n        setIsVisibleMovieCard(true);\n\n        const {\n          Title,\n          Plot,\n          Poster,\n          imdbID,\n        } = result;\n\n        const selectedMovie: Movie = {\n          title: Title,\n          description: Plot,\n          imgUrl: Poster === 'N/A'\n            ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n            : Poster,\n          imdbUrl: `https://www.imdb.com/title/${imdbID}`,\n          imdbId: imdbID,\n        };\n\n        setMovie(selectedMovie);\n      }\n    })\n      .finally(() => {\n        setIsLoading(false); // Set isLoading to false when the request is complete\n      });\n  };\n\n  const handleAddMovieBtn = () => {\n    if (!movies.find(movieItem => movieItem.imdbId === movie.imdbId)) {\n      const newMovies = [...movies, movie];\n\n      addMovie(newMovies);\n    }\n\n    setIsVisibleMovieCard(false);\n    setInputValue('');\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input\"\n              value={inputValue}\n              onChange={handleInputChange}\n            />\n          </div>\n\n          {\n            isError && (\n              <p className=\"help is-danger\" data-cy=\"errorMessage\">\n                Can&apos;t find a movie with such a title\n              </p>\n            )\n          }\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={`button is-light ${isLoading ? 'is-loading' : ''}`}\n              onClick={handleSearchBtn}\n              disabled={!inputValue}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {isVisibleMovieCard && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleAddMovieBtn}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n      {isVisibleMovieCard && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ResponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=dc33175c';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          movies={movies}\n          addMovie={setMovies}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}